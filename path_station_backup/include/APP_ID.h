// Generated by gencpp from file path_station/APP_ID.msg
// DO NOT EDIT!


#ifndef PATH_STATION_MESSAGE_APP_ID_H
#define PATH_STATION_MESSAGE_APP_ID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_station
{
template <class ContainerAllocator>
struct APP_ID_
{
  typedef APP_ID_<ContainerAllocator> Type;

  APP_ID_()
    : call(false)
    , go(0)
    , APP_NODE()
    , time(0)  {
    }
  APP_ID_(const ContainerAllocator& _alloc)
    : call(false)
    , go(0)
    , APP_NODE(_alloc)
    , time(0)  {
  (void)_alloc;
    }



   typedef uint8_t _call_type;
  _call_type call;

   typedef int32_t _go_type;
  _go_type go;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _APP_NODE_type;
  _APP_NODE_type APP_NODE;

   typedef int32_t _time_type;
  _time_type time;




  typedef boost::shared_ptr< ::path_station::APP_ID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_station::APP_ID_<ContainerAllocator> const> ConstPtr;

}; // struct APP_ID_

typedef ::path_station::APP_ID_<std::allocator<void> > APP_ID;

typedef boost::shared_ptr< ::path_station::APP_ID > APP_IDPtr;
typedef boost::shared_ptr< ::path_station::APP_ID const> APP_IDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_station::APP_ID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_station::APP_ID_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_station

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'path_station': ['/home/exbot/catkin_ws/src/path_station/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_station::APP_ID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_station::APP_ID_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_station::APP_ID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_station::APP_ID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_station::APP_ID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_station::APP_ID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_station::APP_ID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a2e9c055f75c257ed4f6746ce1dc469";
  }

  static const char* value(const ::path_station::APP_ID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a2e9c055f75c257ULL;
  static const uint64_t static_value2 = 0xed4f6746ce1dc469ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_station::APP_ID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_station/APP_ID";
  }

  static const char* value(const ::path_station::APP_ID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_station::APP_ID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
bool   call\n\
int32  go\n\
string APP_NODE\n\
int32  time\n\
\n\
\n\
";
  }

  static const char* value(const ::path_station::APP_ID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_station::APP_ID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.call);
      stream.next(m.go);
      stream.next(m.APP_NODE);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct APP_ID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_station::APP_ID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_station::APP_ID_<ContainerAllocator>& v)
  {
    s << indent << "call: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.call);
    s << indent << "go: ";
    Printer<int32_t>::stream(s, indent + "  ", v.go);
    s << indent << "APP_NODE: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.APP_NODE);
    s << indent << "time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_STATION_MESSAGE_APP_ID_H
